syntax = "proto3";


import "shared.proto";

package org.plasmalabs.bridge.consensus.service;

service StateMachineService {
  rpc ExecuteRequest(org.plasmalabs.bridge.shared.StateMachineRequest) returns (org.plasmalabs.bridge.shared.Empty);
  rpc MintingStatus(org.plasmalabs.bridge.shared.MintingStatusOperation) returns (MintingStatusReply);
}


message MintingStatusReply {
  oneof result {
    MintingStatusRes mintingStatus = 1;
    SessionNotFoundRes sessionNotFound = 2;
  }
}

service ResponseService {
  rpc DeliverResponse(StateMachineReply) returns (org.plasmalabs.bridge.shared.Empty);
}


message StateMachineReply {
  uint64 viewNumber = 1; // current view number
  uint64 timestamp = 2; // timestamp of the request
  uint32 replicaNumber = 3; // replica number of the request
  bytes signature = 4; // signature of the request
  oneof result {
    StartSessionRes startSession = 5;
    SessionNotFoundRes sessionNotFound = 6;
    InvalidInputRes invalidInput = 7;
  }
}


message StartSessionRes {
  string sessionId = 1;
  string script = 2;
  string escrowAddress = 3;
  string descriptor = 4;
  uint64 minHeight = 5;
  uint64 maxHeight = 6;
}

message SessionNotFoundRes {
  string sessionId = 1;
}

message InvalidInputRes {
  string errorMessage = 1;
}


message MintingStatusRes {
  string sessionId = 1;
  string mintingStatus = 2;
  string address = 3;
  string redeemScript = 4;
}

message SignatureMessage {
  int32 replicaId = 1;
  bytes signature = 2;
}

message SignatureMessageReply {
  int32 walletId = 2;
  string bytesToSign = 3;
  oneof result {
    SignatureMessage signatureMessage = 4;
    InvalidInputRes invalidInput = 5;
  }
}

message GetSignatureRequest {
  int32 replicaId = 1;
  int32 walletId = 2;
  string bytesToSign = 3; // bytes the other replica should sign 
  bytes signature = 4; // signature of the request
}

service OutOfBandService {
  rpc DeliverSignature (GetSignatureRequest) returns (SignatureMessageReply) {}
}